<apex:page language="de" showHeader="false">
<style>
#liveAgentClientChat.liveAgentStateWaiting {
// The CSS class that is applied when the chat request is waiting to be accepted
// See "Waiting State" screenshot below
}
#liveAgentClientChat {
// The CSS class that is applied when the chat is currently engaged
// See "Engaged State" screenshot below
}
#liveAgentClientChat.liveAgentStateEnded {
// The CSS class that is applied when the chat has ended
// See "Ended State" screenshot below
}

body {
    overflow: hidden;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    color: #4D4D4D;
}

body button {
    padding: 0 0 3px;
    cursor: pointer;
    border: 1px solid #D3D3D3;
    border-radius: 3px;
    background: none;
    height: 22px;
    line-height: 22px;
    font-family: Verdana, Geneva, sans-serif;
    font-weight: normal;
    font-size: 12px;
}

body button:hover {
    color: #FF862D;
    border-color: orange;
}

body button:focus {
    outline: none;
}

body a:hover {
    text-decoration: none;
    color: #FF862D;
}

<!-- timestamps for chat messages -->
.timestamp {
    color: #D3D3D3;
    text-align: right;
}

#waitingMessage {
    height: 100%;
    width: 100%;
    vertical-align: middle;
    text-align: center;
    display: none;
    z-index: 3;
}

#liveAgentClientChat.liveAgentStateWaiting #waitingMessage {
    display: table;
}

<!-- cancel chat button -->
#cancelButton {
    padding: 0 0 3px;
    position: absolute;
    top: 65%;
    left: 50%;
    transform: translate(-50%, 0);
    margin: auto;
    display: none;
    cursor: pointer;
    z-index: 10;
    border: 1px solid #D3D3D3;
    border-radius: 3px;
    background: none;
    height: 28px;
    line-height: 28px;
    font-family: Verdana, Geneva, sans-serif;
    font-weight: normal;
    font-size: 12px;
    width: 106px;
}

#liveAgentClientChat.liveAgentStateWaiting #cancelButton {
    display: block;
}

<!-- orange header with Live Chat at the top -->
#chatHeader {
    display:inline-block;
    background-color: #FF9F3B;
    text-align: center;
    height: 24px;
    line-height: 24px;
    font-weight: bold;
    color: #ffffff;
    width: 100%;
}

<!-- logo image -->
#chatLogo {
    display: block;
    border: 1px solid #EEE;
    border-radius: 2px;
    position: absolute;
    top: 10px;
    left: 6px;
}

<!-- overall container for the chat excluding the header -->
#chatBoxContainer {
    margin: 2px;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

#chatContainer {
    position: absolute;
    top: 25px;
    left: 5px;
    right: 5px;
    bottom: 0px;
    z-index: 0;
}

#statusMessageContainer {
    display: none;
    background-color: #FFE2B9;
    border: 1px solid #D3D3D3;
    border-radius: 3px;
    position: absolute;
    height: 60px;
    width: 80%;
    top: 40%;
    left: 10%;
    z-index: 2;
    padding: 5px;
    text-align: center;
    box-shadow: 0px 0px 10px #D3D3D3;
}

#liveAgentClientChat.liveAgentStateStatusMessage #statusMessageContainer {
    display: block;
}

#chatLogContainer {
    position: absolute;
    margin-top:4px;
    top: 36px;
    bottom: 50px;
    right: 0;
    left: 0;
    padding: 2px;
    word-wrap: break-word;
    z-index: 0;
}

#liveAgentChatLog {
    border: none;
    padding: 5px;
    width: auto;
    height: auto;
    top: 0;
    position: absolute;
    overflow-y: auto;
    left: 0;
    right: 0;
    bottom: 0;
}

<!-- agent and client name text -->
#liveAgentChatLogText .name {
    font-size: 14px;
}

<!-- chat message text -->
#liveAgentChatLogText .messageText {
    display: block;
    font-size: 13px;
}

<!-- system messages e.g. "you've ended the chat" -->
.system{
    font-size: 15px;
    margin: 4px;
    color: #FF862D;
}

<!-- White space at top with border -->
#chatTopAreaContainer {
    position: absolute;
    width: 100%;
    height: 36px;
    top: 24px;
    border-bottom: 1px solid #D3D3D3;
    margin: 2px;
    z-index: 4;
}

<!-- File transfer requested -->
.file_transfer_requested #fileTransferContainer{
    display: block;
    z-index: 4;
}

<!-- File drag area size -->
.liveAgentFileDragArea {
    height: 54px;
    padding-top: 4px;
}

<!-- File transfer hidden -->
#fileTransferContainer {
    display: none;
    width: 99%;
    position: fixed;
    left: 0.5%;
    top: 64px;
    height: 90px;
    text-align: center;
    background-color: #fff;
    border: 1px solid #D3D3D3;
    border-radius: 3px;
    box-shadow: 0px 3px 5px #D3D3D3;
}

<!-- Cancel file transfer button -->
#fileCancelButton, #fileSendButton {
    cursor: pointer;
    width: 68px;
}

<!-- Save button in menu -->
#liveAgentSaveButton {
    border: none;
    margin-top: 2px;
    margin-bottom: 2px;
    background: none;
    display: block;
    position: absolute;
    left: 4px;
    height: 24px;
    line-height: 24px;
    width: 220px;
    font-family: Verdana, Geneva, sans-serif;
    font-weight: normal;
    font-size: 12px;
    text-align: left;
    z-index: 2;
    cursor: pointer;
}

#liveAgentSaveButton:hover, .liveAgentEndButton:hover {
    color: #FF862D;
}

<!-- End button in menu -->
.liveAgentEndButton {
    border: none;
    margin-top: 2px;
    margin-bottom: 2px;
    background: none;
    display: block;
    position: absolute;
    left: 4px;
    top: 26px;
    height: 24px;
    line-height: 24px;
    width: 220px;
    font-family: Verdana, Geneva, sans-serif;
    font-weight: normal;
    font-size: 12px;
    text-align: left;
    z-index: 2;
    cursor: pointer;
}

<!-- positioning of chat Input Area and Button container -->
#chatInputBox {
    display: none;
    position: absolute;
    height: auto;
    width: 100%;
    right: 0;
    bottom: 20px;
    left: 0;
}

<!-- positioning of text input box -->
#liveAgentChatInput {
    display: inline-block;
    width: 80%;
    padding: 4px;
    border: 1px solid;
    border-radius: 3px;
    border-color: #D3D3D3;
    margin-left: 4px;
    margin-bottom: 4px;
}

<!-- styling of text within text input box -->
#liveAgentClientChat textarea#liveAgentChatTextArea {
    display: inline-block;
    font-family: Verdana, Geneva, sans-serif;
    font-size: 13px;
    box-shadow: none;
    text-indent: 0;
    color: #4D4D4D;
}


#liveAgentClientChat.liveAgentStateWaiting #chatInputBox {
    display: none;
}
    
#liveAgentClientChat #chatInputBox {
    display: block;
}

#liveAgentClientChat.liveAgentStateEnded #chatInputBox {
    display: none;
}

#liveAgentClientChat.liveAgentStateEnded #liveAgentMessageContainer {
    display: "none";
}

#liveAgentClientChat.liveAgentStateEnded #liveAgentMessageStatus {
    display: "block";
}

<!-- send button -->
.liveAgentSendButton {
    padding: 0 0 3px;
    border: 1px solid #D3D3D3;
    border-radius: 3px;
    margin: 0px;
    margin-right: 4px;
    margin-bottom: 4px;
    background: #fff;
    display: block;
    position: absolute;
    bottom: 0;
    right: 0;
    height: 28px;
    line-height: 28px;
    width: 58px;
    font-family: Verdana, Geneva, sans-serif;
    font-weight: normal;
    font-size: 12px;
    cursor: pointer;
}

iframe {
    height: 500px;
    width: 400px;
    border: none;
}

#liveAgentChatInput:hover, #liveAgentChatInput:focus-within {
    outline: none;
    border-color: orange;
}


<!-- options button -->
#options {
    position: absolute;
    bottom: 4px;
    left: 4px;
    cursor: pointer;
}

#optionsText {
    font-size: 13px;
}

#options:hover{
    color: #FF862D;
}

#liveAgentClientChat.liveAgentStateWaiting #options{
    display: none;
}

<!-- Options Menu (container) -->
.options-menu {
  display: none;
  border: 1px solid #D3D3D3;
  border-radius: 3px;
  box-shadow: 0px 0px 10px #D3D3D3;
  position: fixed;
  z-index: 1;
  left: 4px;
  bottom: 22px;
  width: 60%;
  height: 54px;
  overflow: auto;
}

<!-- Options Menu (content) -->
.options-content {
  background-color: #fefefe;
  margin: auto;
  width: auto;
  height: 50px;
}

</style>

<div id="chatHeader">
    {!$Label.chat_live_chat}
</div>

<div id="chat_unavailable" style="display: none;">
    <iframe id="chat_unavailable_iframe" name="chat_unavailable_iframe" title="chat_unavailable_iframe" src="about:blank" style="display: block"></iframe>
</div>

<div id="chatBoxContainer">
<liveAgent:clientChat >

<img id="chatLogo" src="https://www.mymeetinghelp.com/@api/deki/files/4927/GM-favicon-48.png?origin=mt-web" />

<div id="chatTopAreaContainer">
</div>  

 <div id="fileTransferContainer">
    <liveAgent:clientChatFileTransfer />
</div>

    <div id="chatContainer">
        <div id="statusMessageContainer">
            <liveAgent:clientChatAlertMessage agentsUnavailableLabel="" />
            <liveAgent:clientChatStatusMessage />
        </div>
        
        <table id="waitingMessage" cellpadding="0" cellspacing="0">
                <tr>
                    <td>
                        {!$Label.chat_Please_wait_while_connected_to_agent} <br />
                    </td>
                </tr>   
        </table>
        
        <button class="liveAgentCancelButton" id="cancelButton" onclick="SfdcApp.LiveAgent.Chasitor.cancelChat();cancelChatMessage();" title="cancel">{!$Label.chat_Cancel_chat}</button>
        
        <div id="chatLogContainer">
            <liveAgent:clientChatLog showTimeStamp="true" />
        </div>
        </div>
    
        <div id="chatInputBox">
            <liveagent:clientChatInput useMultiline="true" autoResizeElementId="chatLogContainer" />
            <liveAgent:clientChatSendButton />
        </div>
        
        <div class="options-menu">
            <div class="options-content">
                <span class="perma-option"><liveAgent:clientChatSaveButton /></span>
                <span class="live-option"><liveAgent:clientChatEndButton /></span>
            </div>
        </div>
        
        <div id="options">
            <a id="optionsText">{!$Label.chat_Options}</a>
        </div>        
    
</liveAgent:clientChat>
</div>

<script type="text/javascript">
    var current_URL = '{!$CurrentPage.URL}';
    var org;
    
    
    //check org based on URL
    var parser = document.createElement('a');
    parser.href = current_URL;    
    parser.hostname; // e.g. pgi.force.com

    if(parser.hostname.indexOf('dev-pgi.cs9.force.com') != -1){
       org = "dev";
    }
    
    else if (parser.hostname.indexOf('staging-pgi.cs9.force.com') != -1){
       org = "staging";
    }
    
    else if (parser.hostname.indexOf('pgi.force.com') != -1 || parser.hostname.indexOf('pgi.secure.force.com') != -1){
       org = "prod";
    }
    
    else org = "prod";
    
    var origin = "in_product";
    var offline_URL = '/chatcustompage/ChatUnavailable_WebCase';

//Options button
    var optionsButton = document.getElementById("optionsText");
    var optionsMenu = document.getElementsByClassName("options-menu")[0];
    var optionsContent = document.getElementsByClassName("options-content")[0];
    var optionsOpen = false;
    var permaOptions = document.getElementsByClassName("perma-option");
    var liveOptions = document.getElementsByClassName("live-option");
    
    //add options to menu
    var optionsArray = new Array();
    for (var i = 0; i < liveOptions.length; i++){
        optionsArray[i] = liveOptions[i];
    }
    
    for (var i = liveOptions.length; i < (permaOptions.length+liveOptions.length); i++){
        optionsArray[i] = permaOptions[i - liveOptions.length];
    }
    
    //var optionsArray = [permaOptions[0], liveOptions[0]];
    var optionHeight = 26;
    var numOptions = optionsArray.length;
    
    //dynamically set height of options menu based on number of options
    function setOptionsHeight(){
        optionsContent.style.height = optionHeight*numOptions + "px";
        optionsMenu.style.height = (optionHeight)*numOptions + 2 + "px";
    }
    
    setOptionsHeight();
    
    optionsButton.onclick= function() {
        if (!optionsOpen) {
            optionsMenu.style.display = "block";
            optionsOpen = true;
        }
        else {
            optionsMenu.style.display = "none";
            optionsOpen = false;
        }
    }
    
    // When the user clicks anywhere outside of the menu, close it
    window.onclick = function(event) {
        if (event.target != optionsMenu && event.target != optionsContent && event.target != optionsButton) {
            optionsMenu.style.display = "none";
            optionsOpen = false;
        }
    }

//Chat Events
 
    var chatLive = false;
    var chatEnded = false;
    var chatWaiting = false;
    var fileRequested = false; //to do - open file upload dialog when file is requested
    
    var endmode= 'unavailable';

function cancelChatMessage(elementId) {
    endmode= 'canceled';
    
    var event;
    if(typeof(Event) === 'function') {
        event = new Event("chatEndedEvent");
    }
    else{
        event = document.createEvent('Event');
        event.initEvent("chatEndedEvent", true, true);
    }

    document.dispatchEvent(event);
    
   // document.dispatchEvent(new Event("chatEndedEvent"));
    clearInterval(classCheckerInterval);
    console.log("Chat status is CANCELED");
    chatEnded = true;
}


//Chat Waiting Event Listener   
document.addEventListener("chatWaitingEvent", function() {
});

//Chat Live Event Listener
document.addEventListener("chatLiveEvent", function() {

//send the message from prechat once the chat starts
document.querySelector("#liveAgentChatTextArea").value = sessionStorage.getItem("Description");
SfdcApp.LiveAgent.Chasitor.sendMessage();

//change placeholder text of text input box only for English
if ('{!$CurrentPage.language}' == 'en_US'){
    document.querySelector("#liveAgentChatTextArea").placeholder= "Type your message here";
}
});

//Chat Ended Event Listener
document.addEventListener("chatEndedEvent", function() {

    //remove live options from menu as they are not valid when chat has ended
    for(var i = 0; i < liveOptions.length; i++){
        liveOptions[i].style.display = "none";
        numOptions--;
    }

    //set new height of options menu
    setOptionsHeight();

    //if chat was answered, do nothing      
    if (chatLive == true) {
        console.log("agent reached");
    }

    //else if chat timed out, create Missed Chat Email Case     
    else {
        console.log("agent not reached");
        //hide chat
       document.getElementById("chatHeader").style.display = "none";
       document.getElementById("chatBoxContainer").style.display = "none";
        
        //display web to case page
        document.getElementById('chat_unavailable_iframe').src = offline_URL + '?lang=' + '{!$CurrentPage.language}' + '&endmode=' + endmode + '&org=' + org + '&origin=' + origin;
        document.querySelector("#chat_unavailable").style.display = "block";
   } 
   
});
     
function checkState(){
    //if status changes to chatWaiting
    if (document.querySelector("#liveAgentClientChat").classList.contains("liveAgentStateWaiting") && !chatWaiting) {
    
        var event;
        if(typeof(Event) === 'function') {
            event = new Event("chatWaitingEvent");
        }
        else{
            event = document.createEvent('Event');
            event.initEvent("chatWaitingEvent", true, true);
        }
        document.dispatchEvent(event);
    
     //   document.dispatchEvent(new Event("chatWaitingEvent"));
        console.log("Chat status is WAITING");
        chatWaiting = true;
    }
        
    //if status changes to chatLive
    if (document.querySelector("#liveAgentClientChat").classList.contains("liveAgentState") && !chatLive) {
    
        var event;
        if(typeof(Event) === 'function') {
            event = new Event("chatLiveEvent");
        }
        else{
            event = document.createEvent('Event');
            event.initEvent("chatLiveEvent", true, true);
        }
        document.dispatchEvent(event);
    
        //document.dispatchEvent(new Event("chatLiveEvent"));
        console.log("Chat status is LIVE");
        chatLive = true;
    }
    
    //if status changes to chatEnded
    if (document.querySelector("#liveAgentClientChat").classList.contains("liveAgentStateEnded") && !chatEnded) {
    
        var event;
        if(typeof(Event) === 'function') {
            event = new Event("chatEndedEvent");
        }
        else{
            event = document.createEvent('Event');
            event.initEvent("chatEndedEvent", true, true);
        }
        document.dispatchEvent(event);
    
       //document.dispatchEvent(new Event("chatEndedEvent"));
        clearInterval(classCheckerInterval);
        console.log("Chat status is ENDED");
        chatEnded = true;
    }
    
}


//set polling rate for checkState function to run
var classCheckerInterval;
classCheckerInterval = setInterval(checkState, 100); 
</script>

</apex:page>