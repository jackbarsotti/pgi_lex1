<apex:page standardController="Case" extensions="CaseTabViewer,QuickCaseController" action="{!init}" id="pg" lightningStylesheets="true">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <apex:stylesheet value="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <style>
        textarea {
            font-family: 'Arial','Helvetica',sans-serif;
            font-size: 100%;
            width:85%;
        }
    </style>
    <!-- <script src="//cdn.ckeditor.com/4.8.0/standard/ckeditor.js"></script> -->
    <script>
    var j$ = jQuery.noConflict();
    var fieldsNeedingInput = '';
    j$( function() { 
        j$( "#tabs" ).tabs();
        
        checkRequiredFields();
    } );
    var isNew = {!isNew};
    function saveCheck() {
        console.log('-----console save----->');
        checkRequiredFields();
        if(fieldsNeedingInput != '') {
            addError(fieldsNeedingInput);
            return false;
        } else {
            isNew = false;
            saveJs();
        }
    }

    function checkRequiredFields(){
        fieldsNeedingInput = '';
        var tabs = document.getElementsByClassName("ui-required-tab");
        for(var i = tabs.length; i > -1 ; i--) {

            j$(tabs[i]).removeClass("ui-required-tab"); 
        }
        
        j$('.requiredBlock').each( function(i, obj) {
            //find required fields
                var currentRequired = j$(this);
                j$(currentRequired).siblings().each(function() {
                    j$(this).children().each(function() {

                        var currentElement = j$(this).context;

                        if(currentElement.id != '' && currentElement.id != undefined) {
                            if(currentElement.id.includes("fInput") && !document.getElementById(currentElement.id).disabled) {

                               if((currentElement.value != undefined) && (currentElement.value == null || currentElement.value.trim() == '')) {

                                    // reqIds.push(firstCId);
                                    var label = j$("label[for='"+currentElement.id+"']");
                                    if(label[0] != undefined) {
                                        fieldsNeedingInput += label[0].textContent + ',';
                                    }

                                    
                                    var tabId = "tab" + currentElement.id.slice(0, currentElement.id.lastIndexOf(":pbs")).split("tab:")[1] + ".0";

                                    if(tabId.indexOf('undefined') < 0) {

                                     document.getElementById(tabId).className += " ui-required-tab ";
                                    }
                                }
                            }
                        }

                    }); 

                    var currentElement = j$(this).context;

                    if(currentElement.id != '' && currentElement.id != undefined) {
                        if(currentElement.id.includes("fInput") && !document.getElementById(currentElement.id).disabled) {

                           if((currentElement.value != undefined) && (currentElement.value == null || currentElement.value.trim() == '') ) {
                                // reqIds.push(firstCId);

                                var label = j$("label[for='"+currentElement.id+"']");
                                if(label[0] != undefined) {
                                    fieldsNeedingInput += label[0].textContent+ ',';
                                }
                                var tabId = "tab" + currentElement.id.slice(0, currentElement.id.lastIndexOf(":pbs")).split("tab:")[1] + ".0";

                                if(tabId.indexOf('undefined') < 0) {

                                    document.getElementById(tabId).className += " ui-required-tab ";
                                }
                            }
                        }
                    }
                });

               
            });
        //error'd fields
        for(var i =0;i < document.getElementsByClassName("error").length;i++){
            var firstCId = document.getElementsByClassName("error")[i].id;
            if(firstCId.includes("fInput") && !document.getElementById(firstCId).disabled){
                var label = j$("label[for='"+firstCId+"']");
                fieldsNeedingInput += label[0].textContent+ ',';
                var tabId = "tab" + firstCId.slice(0, firstCId.lastIndexOf(":pbs")).split("tab:")[1] + ".0";
                
                if(tabId.indexOf('undefined') < 0) {

                    document.getElementById(tabId).className += " ui-required-tab ";
                }
            }
        }
    }

    </script>
    <style>
        .ui-tabs-anchor{ 
            color:black !important;
            font-size: 16px;
        }
        .ui-state-active, .ui-widget-content .ui-tabs .ui-tabs-nav .ui-tabs-anchor .ui-state-active, .ui-widget-header .ui-state-active, a.ui-button:active, .ui-button:active, .ui-button.ui-state-active:hover {
            border: 1px solid #003eff !important;
            border-bottom-width: 0; 
            padding-bottom: 0px !important;
            background: #007fff !important;
        }
        .ui-state-active a, .ui-state-active a:link, .ui-state-active a:visited {
            color: #ffffff !important;
        }
        .ui-required-tab {
            background-color: red !important;
        }
        .body-none {
            display: none;
        }
    </style> 
        <apex:pageMessages id="pm"/>
        <apex:form id="form" styleClass="body-none" rendered="{!success}">
            <apex:actionFunction action="{!doNothing}" name="refreshPage" reRender="op1, op2, op3" />
            <apex:actionFunction action="{!save}" name="saveJs" oncomplete="setUnsavedFalse();" reRender="pm"/>
            <!-- <apex:actionFunction action="{!populateCaseNumber}" name="populateCaseNumberJs" reRender="pm"/> -->
            <apex:actionFunction action="{!cancel}" name="cancelJs" reRender="pm"/>
            <apex:actionFunction action="{!addError}" name="addError" reRender="pm">
                <apex:param value="" assignTo="{!errorMessage}" name="errorMessage" />
            </apex:actionFunction>
            <apex:actionFunction action="{!isInConsole}" name="isInConsole" rerender="pm">
                <apex:param name="isConsole" assignTo="{!isConsole}" value="" />
            </apex:actionFunction>
            <apex:pageBlock id="pb">
                <apex:pageBlockButtons >
                    <apex:commandButton onclick="saveCheck();return false;" value="Save" reRender="pm"/>
                    <apex:commandButton onclick="cancel();return false;" value="Cancel" immediate="true" />
                </apex:pageBlockButtons>
                <apex:outputPanel rendered="{!quickCaseEnabled}"  >
                    <apex:pageBlockSection title="Quick Case" >
                            <apex:outputLabel value="Would you like to select a quick case? " for="qc"  />
                            <apex:selectList id="qc" size="1" multiselect="false" value="{!quickCase}" onchange="setqc(this.options[this.selectedIndex].value);">
                                <apex:selectOptions value="{!caseTemplateSelectList}" />
                            </apex:selectList>
                            <apex:actionFunction action="{!quickCasePopulation}" reRender="script,pb" name="setqc" oncomplete="checkPicklists();setInitialValues();j$('#tabs').tabs();checkRequiredFields();ReloadCKEditor();">
                                <apex:param assignTo="{!quickCase}" value="" name="quickCase"/>
                            </apex:actionFunction>
                     </apex:pageBlockSection> 
                </apex:outputPanel>
                 <apex:outputPanel rendered="{!IF(AND(topCount > 0,(topCount + tabCount) < layoutSections.size + 1),true,false) }" id="op1">
                 
                    <apex:repeat value="{!layoutSections}" var="section" rows="{!topCount}">
                        <apex:pageBlockSection title="{!section.Name}" collapsible="{!section.allowCollapse}" columns="{!IF(section.Name == 'Description Information', 1, section.columns)}">
                            <apex:repeat value="{!section.layoutFields}" var="lf">
                                <apex:pageblocksectionitem >
                                
                                    <apex:outputLabel value="{!lf.Label}" for="fInput"/>
                                    <apex:outputPanel styleClass="{!IF(lf.required, 'requiredInput', 'notarequiredinput')}" layout="block" >
                                    <apex:outputPanel styleClass="{!IF(lf.required, 'requiredBlock', 'notarequiredinput')}" layout="block"/>
                                         <apex:inputField value="{!Case[lf.ApiName]}" rendered="{!lf.ApiName != '' && lf.editableForNew && !lf.richText}" id="fInput" html-inputName="{!lf.ApiName}__input" style="{!IF(lf.ApiName == 'Subject', 'width: 85%', '')}">
                                             <apex:actionSupport event="onchange" onsubmit="checkPicklists();return false;" rendered="{!lf.ApiName == 'Product__c' || lf.ApiName == 'Area_of_Focus__c' || lf.ApiName == 'Symptom_Main__c' || lf.ApiName == 'Symptom_Sub__c'}" />
                                             <apex:actionSupport event="onchange" onsubmit="setConferenceInfo();return false;" rendered="{!lf.ApiName == 'PGi_Conference__c'}" />
                                             <apex:actionSupport event="onchange" onsubmit="setClientInfo();return false;" rendered="{!lf.ApiName == 'PGi_Client__c'}" />
                                        </apex:inputField>
                                        <apex:outputField value="{!Case[lf.ApiName]}" rendered="{!not(lf.isPlaceholder) && !lf.editableForNew}" />
                                        <apex:inputTextarea value="{!Case[lf.ApiName]}" rendered="{!lf.richText}" styleClass="ckeditor" richText="false" Id="richtext"/>
       <!--                                  

                                        <c:CustomFieldRenderer record="{!Case}" richText="{!lf.richText}" fieldName="{!lf.ApiName}" label="{!lf.Label}" required="{!lf.required}" placeholder="{!lf.isPlaceHOlder}" editableForNew="{!lf.editableForNew}" rendered="{!lf.richText}"/>

 -->
                                    </apex:outputPanel>
                                </apex:pageblocksectionitem>
                            </apex:repeat>
                        </apex:pageBlockSection>
                    </apex:repeat> 
                 </apex:outputPanel>
                 <apex:outputPanel rendered="{!IF(AND(tabCount > 0,(topCount + tabCount) < layoutSections.size + 1),true,false) }"  id="op2" >
                    <div id="tabs">
                        
                        <apex:variable var="cnt" value="{!topCount}" />
                        <ul>
                            <apex:repeat value="{!layoutSections}" var="layoutSection" rows="{!tabCount}" >
                                <li id="tab{!cnt}" onclick="checkRequiredFields();"><a href="#{!cnt}">{!layoutSections[cnt].name}</a></li>
                                <apex:variable var="cnt" value="{!cnt+1}"/>
                            </apex:repeat>
                        </ul>
                        <apex:variable var="cntt" value="{!topCount}" /> 
                        <apex:repeat value="{!layoutSections}" var="layoutSection" rows="{!tabCount}" id="tab" first="{!topCount}">
                            <div id="{!cntt}">
                                <apex:pageBlockSection id="pbs" >
                                
                                    <!--Each section has layoutFields, let's iterate them as well-->
                                    <apex:repeat value="{!layoutSection.layoutFields}" var="layoutField"  >
                                        <apex:pageblocksectionitem >
                                            <apex:outputLabel value="{!layoutField.Label}" for="fInput"/>
                                            <apex:outputPanel styleClass="{!IF(layoutField.required, 'requiredInput', 'notarequiredinput')}" layout="block" >
                                            <apex:outputPanel styleClass="{!IF(layoutField.required, 'requiredBlock', 'notarequiredinput')}" layout="block"/>
<!--                                                 <c:CustomFieldRenderer record="{!Case}" richText="{!layoutField.richText}" fieldName="{!layoutField.ApiName}" label="{!layoutField.Label}" required="{!layoutField.required}" placeholder="{!layoutField.isPlaceHOlder}" editableForNew="{!layoutField.editableForNew}" rendered="{!layoutField.richText}"/> -->
                                                 <apex:inputField value="{!Case[layoutField.ApiName]}" rendered="{!layoutField.ApiName != '' && layoutField.editableForNew && !layoutField.richText}" id="fInput" html-inputName="{!layoutField.ApiName}__input">
                                                     <apex:actionSupport event="onchange" onsubmit="checkPicklists();return false;" rendered="{!layoutField.ApiName == 'Product__c' || layoutField.ApiName == 'Area_of_Focus__c' || layoutField.ApiName == 'Symptom_Main__c' || layoutField.ApiName == 'Symptom_Sub__c'}" />
                                                     <apex:actionSupport event="onchange" onsubmit="setClientInfo();return false;" rendered="{!layoutField.ApiName == 'PGi_Client__c'}" />
                                                     <apex:actionSupport event="onchange" onsubmit="setConferenceInfo();return false;" rendered="{!layoutField.ApiName == 'PGi_Conference__c'}" />
                                                </apex:inputField>
                                                <apex:inputTextarea value="{!Case[layoutField.ApiName]}" rendered="{!layoutField.richText}" styleClass="ckeditor" richText="false" Id="richtext"/>
                                                <apex:outputField value="{!Case[layoutField.ApiName]}" rendered="{!not(layoutField.isPlaceholder) && !layoutField.editableForNew}" />
                                            </apex:outputPanel>
                                        </apex:pageblocksectionitem>
                                    </apex:repeat>
                                </apex:pageBlockSection>
                            </div>
                            <apex:variable var="cntt" value="{!cntt+1}"/>
                        </apex:repeat>
                    </div>
                </apex:outputPanel>
               
                <apex:outputPanel rendered="{!IF((layoutSections.size)  > ( tabCount + topCount),true,false) }" id="op3" >
                    <apex:variable var="lastRow" value="{!tabCount + topCount }" /> 
                    <apex:repeat value="{!layoutSections}" var="tmp" rows="{!layoutSections.size - tabCount - topCount - 1}" first="{!tabCount + topCount}">
                        <apex:pageBlockSection title="{!layoutSections[lastRow].Name}" collapsible="{!layoutSections[lastRow].allowCollapse}" columns="{!layoutSections[lastRow].columns}">
                            <apex:repeat value="{!tmp.layoutFields}" var="f">
                                <apex:pageblocksectionitem >
                                    <apex:outputLabel value="{!f.Label}" for="fInput"/>
                                    <apex:outputPanel styleClass="{!IF(f.required, 'requiredInput', 'notarequiredinput')}" layout="block" >
                                    <apex:outputPanel styleClass="{!IF(f.required, 'requiredBlock', 'notarequiredinput')}" layout="block"/>
                                        <!-- <c:CustomFieldRenderer record="{!Case}" richText="{!f.richText}" fieldName="{!f.ApiName}" label="{!f.Label}" required="{!f.required}" placeholder="{!f.isPlaceHOlder}" editableForNew="{!f.editableForNew}" rendered="{!f.richText}"/> -->
                                        <apex:inputField value="{!Case[f.ApiName]}" rendered="{!f.ApiName != '' && f.editableForNew && !f.richText}" id="fInput" html-inputName="{!f.ApiName}__input">
                                             <apex:actionSupport event="onchange" onsubmit="checkPicklists();return false;" rendered="{!f.ApiName == 'Product__c' || f.ApiName == 'Area_of_Focus__c' || f.ApiName == 'Symptom_Main__c' || f.ApiName == 'Symptom_Sub__c'}" />
                                             <apex:actionSupport event="onchange" onsubmit="setClientInfo();return false;" rendered="{!f.ApiName == 'PGi_Client__c'}" />
                                             <apex:actionSupport event="onchange" onsubmit="setConferenceInfo();return false;" rendered="{!f.ApiName == 'PGi_Conference__c'}" />
                                        </apex:inputField>
                                        <apex:outputField value="{!Case[f.ApiName]}" rendered="{!not(f.isPlaceholder) && !f.editableForNew || f.ApiName == 'SvsNowAdditionalComments__c' || f.ApiName == 'SvsNowWorkNotes__c'}"/>
                                         <apex:inputTextarea value="{!Case[f.ApiName]}" rendered="{!f.richText && f.ApiName != 'SvsNowAdditionalComments__c' && f.ApiName != 'SvsNowWorkNotes__c'}" styleClass="ckeditor" richText="false" Id="richtext" disabled=""/>
                                         
                                    </apex:outputPanel>
                                </apex:pageblocksectionitem>
                            </apex:repeat>
                        </apex:pageBlockSection>
                        
                        <apex:outputPanel rendered="{!(layoutSections.size  -1 )  > lastRow}" >
                            <apex:variable var="lastRow" value="{!lastRow + 1}"/>
                        </apex:outputPanel>  
                    </apex:repeat> 
                </apex:outputPanel>  
                <!-- 1234 : {!caseTabSettings.Show_New_Comment__c}
                rt :{!caseTabSettings.RecordType__c}
                Tabcount : {!caseTabSettings.Top_Count__c}
                top : {!caseTabSettings.Tab_Count__c}
                 >>>>>>>>>>>>> :{!caseTabSettings} 
                value..............>> {!caseCommentEnabled} -->
                <!-- <apex:outputPanel rendered="{!caseTabSettings.Show_New_Comment__c}" > -->
                    <apex:outputPanel rendered="{!caseCommentEnabled}" >
                    <apex:pageBlockSection title="New Case Comment" columns="1" collapsible="false">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="Case Comment" for="comment"/>
                            <apex:inputTextarea value="{!caseCommentBody}" id="comment" label="Case Comment" />
                        
                    </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!IF(assignmentSections.size  > 0,true,false) }" >
                    <apex:pageBlockSection title="Optional"  columns="2" collapsible="false">
                        <apex:pageblocksectionitem >
                            <apex:inputCheckbox value="{!isFireAssRule }"  disabled="{!isNew}"/>  Assign using active assignment rules
                        </apex:pageblocksectionitem>
                        <apex:pageblocksectionitem />

                    </apex:pageBlockSection>
                </apex:outputPanel>  
            </apex:pageBlock>

        <apex:outputPanel >
            <script>
                     //clear value
        var productField, aofField, symptomField, subSymptomField, initialized;
        var productFieldId, aofFieldId, symptomFieldId, subSymptomFieldId, conferenceFieldId, bridgeNameFieldId, moderatorPasscodeFieldId, listenOnlyFieldId, participantFieldId, clientFieldId, companyFieldId;
        //todo - add listen to the client field to populate the company
        //todo - add population of the client and the company when the bridge is set
        var getFieldIds = function() {
            try {
                productFieldId = j$('[inputname="Product__c__input"]')[0].id;
                aofFieldId = j$('[inputname="Area_of_Focus__c__input"]')[0].id;
                symptomFieldId = j$('[inputname="Symptom_Main__c__input"]')[0].id;
                subSymptomFieldId = j$('[inputname="Symptom_Sub__c__input"]')[0].id;
                conferenceFieldId = j$('[inputname="PGi_Conference__c__input"]')[0].id;
                bridgeNameFieldId = j$('[inputname="Bridge_Name__c__input"]')[0].id;
                moderatorPasscodeFieldId = j$('[inputname="Moderator_Passcode__c__input"]')[0].id;
                listenOnlyFieldId = j$('[inputname="Listen_Only_Passcode__c__input"]')[0].id;
                participantFieldId = j$('[inputname="Participant_Passcode__c__input"]')[0].id;
                clientFieldId = j$('[inputname="PGi_Client__c__input"]')[0].id;
                companyFieldId = j$('[inputname="PGi_Company__c__input"]')[0].id;
            } catch (exception) {
                
            }
        }
        var setClientInfo = function() {
            console.log('setClientInfo');
            var layour ='{!layoutSections}';
        console.log('-----console save----->',layour);
            var conferenceValue = j$('[id="'+ conferenceFieldId + '"]').val();
            if(conferenceValue != undefined && conferenceValue != '') {
                setConferenceInfo();
            }
            var clientId = j$('[id="'+ clientFieldId + '_lkid"]').val();
            if(clientId == undefined) {
                clientId = ''; 
            }
            var clientValue = j$('[id="'+ clientFieldId + '"]').val();
            if(clientValue == undefined) {
                clientValue = ''; 
            }
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.CaseTabViewer.getClientInfo}', clientValue, clientId,
                function(result,event) {
                    if(event.status) {
                        console.log(result);
                        if(result != null) {
                            result.PGi_Company__c = result.PGi_Company__c || '';
                            if(result.PGi_Company__c != '') {
                                j$('[id="'+ companyFieldId + '"]').val(result.PGi_Company__r.Name);
                                j$('[id="'+ companyFieldId + '_lkid"]').val(result.PGi_Company__c);
                            }
                        }
                    }
                },{escape: true}
            );
        }
        var setConferenceInfo = function() {
            console.log('setConferenceInfo');
            var conferenceValue = j$('[id="'+ conferenceFieldId + '"]').val();
            if(conferenceValue == undefined) {
                conferenceValue = ''; 
            }
            var conferenceId = j$('[id="'+ conferenceFieldId + '_lkid"]').val();
            if(conferenceId == undefined) {
                conferenceId = '';
            }
            console.log(conferenceValue);
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.CaseTabViewer.getConferenceInfo}', conferenceValue, conferenceId,
                function(result,event) {
                    if(event.status) {
                        console.log(result);
                        if(result != null) {
                            result.Bridge_Name__c = result.Bridge_Name__c || '';
                            result.Moderator_Passcode__c = result.Moderator_Passcode__c || '';
                            result.Listen_Only_Passcode__c = result.Listen_Only_Passcode__c || '';
                            result.Participant_Passcode__c = result.Participant_Passcode__c || '';
                            result.PGi_Client__c = result.PGi_Client__c || '';
                            result.PGi_Client__r.PGi_Company__c = result.PGi_Client__r.PGi_Company__c || '';

                            if(result.Bridge_Name__c != '') {
                                j$('[id="'+ bridgeNameFieldId + '"]').val(result.Bridge_Name__c);
                            }
                            if(result.Moderator_Passcode__c != '') {
                                j$('[id="'+ moderatorPasscodeFieldId + '"]').val(result.Moderator_Passcode__c);
                            }
                            if(result.Listen_Only_Passcode__c != '') {
                                j$('[id="'+ listenOnlyFieldId + '"]').val(result.Listen_Only_Passcode__c);
                            }
                            if(result.Participant_Passcode__c != '') {
                                j$('[id="'+ participantFieldId + '"]').val(result.Participant_Passcode__c);
                            }
                            if(result.PGi_Client__c != '') {
                                j$('[id="'+ clientFieldId + '"]').val(result.PGi_Client__r.Name);
                                j$('[id="'+ clientFieldId + '_lkid"]').val(result.PGi_Client__c);
                            }
                            if(result.PGi_Client__r.PGi_Company__c != '') {
                                if(j$('[id="'+ clientFieldId + '"]').val() == 'Unknown' && j$('[id="'+ companyFieldId + '"]').val() == '') {
                                    j$('[id="'+ companyFieldId + '"]').val(result.PGi_Client__r.PGi_Company__r.Name);
                                    j$('[id="'+ companyFieldId + '_lkid"]').val(result.PGi_Client__r.PGi_Company__c);
                                }
                            }
                        }
                    }
                },{escape: true}
            );
        }

        function initializeFields() {
            try {
                productField = j$('[id="'+ productFieldId + '"]');
                productField.on("change", function() { checkPicklists(); });
                aofField = j$('[id="'+ aofFieldId + '"]');
                aofField.on("change", function() { checkPicklists(); });
                symptomField = j$('[id="'+ symptomFieldId + '"]');
                symptomField.on("change", function() { checkPicklists(); });
                subSymptomField = j$('[id="'+ subSymptomFieldId + '"]');
            } catch (exception) {
                console.log(exception);
            }
        }
        var clearCurrentValue = function(field) {
            // j$("[id$=00N1B00000AxQDipage_j_id9]").val("");
            field.val("");
        }
        var disableField = function(field) {
            field.prop("disabled", true);
            // j$("[id$=00N1B00000AxQDipage_j_id9]").prop("disabled",true);
        }
        var enableField = function(field) {
            field.prop("disabled",false);
            // j$("[id$=00N1B00000AxQDipage_j_id9]").prop("disabled",false);
        }
        // var removePicklistValue = function(field, value) {
        //    j$('option[value="'+value+'"]', )field.remove(); 
        //    // j$('option[value=""]', j$("[id$=00N1B00000AxQDipage_j_id9]")).remove();
        // }

        var removeFieldValues = function(field) {
            field.empty();
        }
        var getProductField = function() {
            // initializeFields();
            return productField;
        }
        var getProductValue = function() {
            if(getProductField() != null) {
                return getProductField().val();
            }
            return null;
        }
        var getAreaOfFocusField = function() {
            // initializeFields();
            return aofField;
        }
        var getAreaOfFocusValue = function() {
            if(getAreaOfFocusField() != null) {
                // console.log(getAreaOfFocusField().value);
                return getAreaOfFocusField().val();
            }
            return null;
        }
        var getSymptomField = function() {
            // initializeFields();
            return symptomField;
        }
        var getSymptomValue = function() {
            if(getSymptomField() != null) {
                return getSymptomField().val();
            }
            return null;
        }
        var getSubSymptomField = function() {
            // initializeFields();
            return subSymptomField;
        }
        var getSubSymptomValue = function() {
            if(getSubSymptomField() != null) {
                return getSubSymptomField().val();
            }
            return null;
        }
        /* RT-306---------Start--*/
        var ProductSymptoms;
        function getUpdatedProductSymptoms(){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.CaseTabViewer.fetchProductSymptoms}',
                function (result, event) {
					if (event.status) {
						if (result != null) {
                            window.localStorage.setItem('ProductSymptomCache', JSON.stringify(result));
                            ProductSymptoms = JSON.parse(window.localStorage.getItem('ProductSymptomCache'));
							}
						}
					}
			);
        }
        var localProductSorage = window.localStorage.getItem('ProductSymptomCache');     
            if(localProductSorage != undefined && localProductSorage != '' && localProductSorage != null  ){
                ProductSymptoms = JSON.parse(window.localStorage.getItem('ProductSymptomCache'));
            }else{
                getUpdatedProductSymptoms();
            }
        /* RT-306---end--*/
        //used to preopulate conference information
        var checkPicklists = function() {
            initializeFields();
            //The field of Area of Focus is dependent on Product 

            //The field of Main Symptom is dependent on Area of Focus 
            
            //The field of  Sub Symptom values to be unique based off of the entire selection not just the previous controlling field,
                
                setFieldValues(getAreaOfFocusField(), ProductSymptoms.productToAreaOfFocusMap[getProductValue()]);
                setFieldValues(getSymptomField(), ProductSymptoms.areaOfFocusToSymptomMap[getProductValue() + '' + getAreaOfFocusValue()]);
                //uses complex key -- cpfs.Product__c + cpfs.Symptom__c + cpfs.Area_of_Focus__c;
                // console.log(getProductValue() + getSymptomValue() + getAreaOfFocusValue());
                setFieldValues(getSubSymptomField(), ProductSymptoms.subSymptomMap[getProductValue() + getSymptomValue() + getAreaOfFocusValue()]);

        }
        
        var setFieldValues = function(field, results) {
            if(field == null || field == undefined) {return;}
            var priorValue = field.val();
            if(results == null || results == undefined || results.length == 0) {
                disableField(field);
                clearCurrentValue(field);
                removeFieldValues(field);
                field.append('<option value="">--None--</option>');
                return;
            } else {
                results.sort();
                enableField(field);
                removeFieldValues(field);
                field.append('<option value="">--None--</option>');
                for(var i = 0; i < results.length; i++) {
                    var loopValue = results[i];
                    j$(field).append('<option value="' + results[i] + '">' + results[i] + '</option>');
                    
                    if(loopValue == priorValue) {
                        field.val(priorValue);
                    }
                }
            }

        }
        checkPicklists();
                </script>
            </apex:outputPanel>
            <apex:outputPanel id="script">
               <script>
               initialized = false;
                var setInitialValues = function() {
                    if(initialized == true) { return; }
                    initialized = true;
                    
                    var Product = "{!Case.Product__c}"; 
                    var Area_of_Focus = "{!Case.Area_of_Focus__c}"; 
                    var Symptom_Main = "{!Case.Symptom_Main__c}"; 
                    var Symptom_Sub = "{!Case.Symptom_Sub__c}"; 
                    getProductField().val(Product);
                    getAreaOfFocusField().val(Area_of_Focus);
                    getSymptomField().val(Symptom_Main);
                    getSubSymptomField().val(Symptom_Sub);
                }
            </script>
        </apex:outputPanel>
        </apex:form>
         <apex:includeScript value="/support/console/47.0/integration.js"/>
     <script type="text/javascript">
        var form = document.getElementsByClassName("body-none");

        function onPageLoad() {
            var form = document.getElementsByClassName("body-none");
            if(sforce != null && sforce.console != null && sforce.console.isInConsole()) {
                //Set the current tab's title
                if("{!Case.Id}" == null || '{!Case.Id}' == '') {
                   
                } else {
                    sforce.console.setTabTitle('{!Case.CaseNumber}');
                }
                displayNone();
                // sforce.console.getEnclosingPrimaryTabId(function (result) {
                //     console.log('getEnclosingPrimaryTabId');
                //     // if(result.id) {
                //         console.log('getEnclosingPrimaryTabId Result ID' + result.Id);
                //         sforce.console.addEventListener(sforce.console.ConsoleEvent.CLOSE_TAB, onEnclosingPrimaryTabClose,  { tabId : result.id });
                //     // }
                // });
                sforce.console.getEnclosingTabId(function (result) {
                    if(result.id) {
                        // console.log('getEnclosingTabId() Result ID' + result.Id);
                        sforce.console.addEventListener(sforce.console.ConsoleEvent.CLOSE_TAB, onEnclosingPrimaryTabClose);
                    }
                });
                sforce.console.setTabUnsavedChanges(true, displayBody());

            } else {
                displayBody();
            }
        };
        //Anup
        //RT-417
        //Method to check if this is called from sforce console or not
        function isItInConsole(){
            if (sforce.console.isInConsole()) {
                isConsole = true;
                isInConsole(isConsole);
                console.log('----->',isConsole);
            }
        };
         var onEnclosingPrimaryTabClose = function (result) {
            // if (sforce.console.isInConsole()) {
            //     isConsole = true;
            //     console.log('----->',isConsole);
            // }
            // console.log('onEnclosingPrimaryTabClose function' + result);
                cancelJs();
        };

        var setUnsavedFalse = function() {
            sforce.console.setTabUnsavedChanges(false, displayBody());
             sforce.console.removeEventListener(sforce.console.ConsoleEvent.CLOSE_TAB, cancel,  { tabId : result.id });
        };
        var displayBody = function() {
             for(var i = 0; i < form.length; i++) {
                j$(form[i]).removeClass("body-none"); 
            }
        };
        var displayNone = function() {
            if(document.getElementById('AppBodyHeader') != null && getElementById('AppBodyHeader').style != null){
                document.getElementById('AppBodyHeader').style.display = 'none';
            }

            if(document.getElementById('sidebarDiv') != null && getElementById('sidebarDiv').style != null){
                document.getElementById('sidebarDiv').style.display = 'none';
            }

        };

        var pageLoad = window.onload;
        try{
            window.onload = function() {
                if (pageLoad && typeof pageLoad == 'function') {
                    getFieldIds(); //store IDs
                    pageLoad(); //standard page load
                    isItInConsole(); //To check if the apex called from salesforce console
                    onPageLoad(); //perform custom page load
                    checkPicklists(); //overwrite dependent picklist values values
                    setClientInfo();
                    setHeightForTextArea();
                    setInitialValues();
                } else {
                    getFieldIds();
                    onPageLoad();
                    isItInConsole(); //To check if the apex called from salesforce console
                    checkPicklists();
                    setClientInfo();
                    setHeightForTextArea();
                    setInitialValues();
                }
                
            }
        } catch (e) {

        }
        //console

       function ReloadCKEditor() {
            // var richTextFields = document.getElementsByClassName("ckeditor");
            // for(var i = richTextFields.length; i > -1 ; i--) {
            //     if(richTextFields[i] != undefined && richTextFields[i].id != undefined) {
            //         CKEDITOR.replace(richTextFields[i].id);
            //     }
            // }
        };
        var cancel = function() {
            if (typeof(srcUp) == 'function') {
                sforce.console.getEnclosingPrimaryTabId(closeSubtab);
           }  
            // if(sforce != null && sforce.console != null && sforce.console.isInConsole()) {
            //     sforce.console.getEnclosingPrimaryTabId(closeSubtab);
            // } else {
            //     cancelJs();
            // }
        };
        var closeSubtab = function closeSubtab(result) {
            var tabId = result.id;
            console.log('TABID',tabId);
            if(isNew) {
                cancelJs();
            }
            sforce.console.closeTab(tabId);
        };
        //classic
        window.onbeforeunload = function() {
            if(isNew) {
                cancelJs();
            }
        };
        checkRequiredFields();
        var setHeightForTextArea = function(){
            j$('textarea').each(function(index){var input = j$(this);
             input.css({height: 70})
         });
        }
        getUpdatedProductSymptoms();
        </script>

</apex:page>