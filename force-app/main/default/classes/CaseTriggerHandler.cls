public without sharing class CaseTriggerHandler extends TriggerHandler {
    public CaseTriggerHandler() {
        super('CaseTriggerHandler');
    }
    private static Set<String> closedStatuses = new Set<String>{'Won', 'Lost', 'Complete', 'Closed - Rejected', 'Closed - Not Needed', 'Closed - Deployed', 'Closed'};
        protected override void beforeUpdate() {
            //setAvgSlaMinutes();
            stampCaseCountdownFields();
            forceAutoGeneratedForSaveFalse();
            descriptionPreview();
            reassignToQueue();
            //setRfcRelatedFields();
            system.debug('Before update');
            pullDataFromParentCase();
            addToPausedTimeToScheduledFields();
            // checkForRestored();
            
            
            // RT-308
            setPriorityLevel();
            setUrgencyLevel();
            // pgiOLAdetails();
            pgiUpdateEmailCase();
            pgiSetCaseFieldsfromZendeskFields();
            pgiSetCompanyandConfDetails();
            checkForClosed();
            
        }
    
    protected override void afterUpdate() {
        // createClosedCaseComment();
        aggregateParents();
        //processRFCCases();
        parentNOCCases();
        //RT 149..
        //callPIDRCloseMethod((List<Case>)Trigger.new);
        
        // RT-308
        pgiCaseAssignmentRecord();
        // pgiInternalSupportCaseClosedSurvey();
        pgiUpdateEmailChildCases();
        //  pgiSetCompanyandConfDetailsEmailAlert();
        //if(!System.isFuture() && !System.isBatch()) {
        //    checkCaseWithMatchedTeamEngineRules(Trigger.newMap.keySet());
        //}
        
    } 
    
    protected override void beforeInsert() {
        try {
            emailToCaseFindParentCase();
        } catch (exception e) {
            
        }
        insertFired = true;
        descriptionPreview();
        populateClientAndConference();
        //setRfcRelatedFields();
        pullDataFromParentCase();
        stampCaseCountdownFields();
        //RT-122---------/
        populatePGiforInboundEmailServiceCaseRT();
        
        // RT-308
        pgiIncidentReviewUpdates();
        setPriorityLevel();
        setUrgencyLevel();
        // pgiOLAdetails();
        pgiUpdateEmailCase();
        pgiSetCaseFieldsfromZendeskFields();
        pgiSetCompanyandConfDetails();
        checkForClosed();
    }
    
    protected override void afterInsert() {
        
        aggregateParents();
        //processRFCCases();
        
        // RT-308
        pgiCaseAssignmentRecord();
        // pgiInternalSupportCaseClosedSurvey();
        pgiUpdateEmailChildCases();
        //   pgiSetCompanyandConfDetailsEmailAlert();
        //if(!System.isFuture() && !System.isBatch()) {
        //  checkCaseWithMatchedTeamEngineRules(Trigger.newMap.keySet());
        // }
        
    }
    protected override void afterDelete() {
        aggregateParents();
    }
    
    private void checkForClosed() {
        for(Case thisCase: (List<Case>)Trigger.new) {
            if(closedStatuses.contains(thisCase.Status)) {
                if(thisCase.First_Response_Time__c == null && thisCase.SLA_Time_to_Complete__c != null) {
                    // add logic here to determine if timestamp should happen or not
                    thisCase.First_Response_SLA__c = thisCase.SLA_Time_Remaining2__c;
                    thisCase.First_Response_Time__c = System.now();
                }
                thisCase.Most_Recent_SLA_Start__c = null;
                thisCase.SLA_Time_To_Complete__c = null;
            }
        }
    }
    private static Boolean insertFired = false;
    // private void checkForRestored() {
    //     if(insertFired == true) {
    //         for(Case c: (List<Case>)Trigger.new) {
    //             if(c.Status == 'Resolved' || c.Status == 'Closed') {
    //                 c.Restored__c = System.now();
    //                 c.Restore_Pause_Time__c = c.Time_To_Restore__c;
    //             }
    //             if(c.Service_Restored__c) {
    //                 c.Restored__c = System.now();
    //                 c.Restore_Pause_Time__c = c.Time_To_Restore__c;
    //             }
    //         }
    //     }
    // }
    public static final String PGI_EXTERNAL_SUPPORT = 'PGi_Client_External_Support';
    private static final String STATUS = 'Status';
    private static final String CONFIRMED_DEFECT = 'Confirmed_Production_Defect__c';
    public static final String PGi_Incident_Case_Review = 'PGi_Incident_Case_Review';
    public static final String PGi_Internal_Support = 'PGi_Internal_Support'; 
    public static final String Inbound_Email_Support = 'Inbound_Email_Support';
    
    public static Map<ID, Schema.RecordTypeInfo> caseRtMap = Case.sObjectType.getDescribe().getRecordTypeInfosById();
    
    public static Map<Id, RecordType> caseRecordTypeMap {get {
        if(caseRecordTypeMap == null) {
            caseRecordTypeMap = new Map<Id, RecordType>([SELECT Id, DeveloperName, Name FROM RecordType WHERE SobjectType = 'Case']);
        }
        return caseRecordTypeMap;
    } set;}
    
    
    private void aggregateParents() {
        List<Case> casesToUpdate = new List<Case>();
        for(Case c: parentCases.values()) {
            if(c.Child_Cases__c != c.Cases.size() + c.Cases__r.size()) {
                c.Child_Cases__c = c.Cases.size() + c.Cases__r.size();
                casesToUpdate.add(c);
            }
        }
        TriggerHandler.bypass('CaseTriggerHandler');
        update casesToUpdate;
        TriggerHandler.clearBypass('CaseTriggerHandler');
    }
    
    private void pullDataFromParentCase() {
        Set<Id> parentCaseSet = new Set<Id>();
        for(Case cs: (List<Case>)Trigger.new) {
            if(cs.recordTypeId != null && caseRtMap.get(cs.recordTypeID) != null && caseRtMap.get(cs.recordTypeID).getName() == 'PGi-Client External Support' && cs.ParentId != null) { //need to check if parent NOC case is closed and pull in related fields 
                parentCaseSet.add(cs.ParentId);
            }
        }
        Map<Id, Case> closedParentNOCCaseMap = new Map<Id, Case>([SELECT Id,  ParentId, Tracking_Root_Category__c, Tracking_Root_Cause__c, Tracking_Root_Issue__c, Actual_Restore_Time__c, Impact_Level__c, Urgency_Level__c 
                                                                  FROM Case 
                                                                  WHERE Id IN: parentCaseSet
                                                                  AND RecordType.DeveloperName = 'PGi_Parent_Ticket_NOC'
                                                                  AND IsClosed = true]);
        for(Case cs: (List<Case>)Trigger.new) {
            if(caseRtMap.get(cs.recordTypeID).getName() == 'PGi-Client External Support' && cs.ParentId != null) { //need to check if parent NOC case is closed and pull in related fields 
                Case parentCase = closedParentNOCCaseMap.get(cs.ParentId);
                updateFieldsFromParentNoc(cs, parentCase);
                
            }
        }
        system.debug('inside of the case--------->when parent is closed'+trigger.isUpdate);                                             
    }
    
    //RT 149 method for Closing PIDR request if the Finance request Status in close
    // private void callPIDRCloseMethod(List<Case> newCaseList){
    
    // }
    
    
    
    private void updateFieldsFromParentNoc(Case childcs, Case parentCase) {
        if(childcs == null || parentCase == null) { return; }
        childcs.Tracking_Root_Category__c = parentCase.Tracking_Root_Category__c;
        childcs.Tracking_Root_Cause__c = parentCase.Tracking_Root_Cause__c;
        childcs.Tracking_Root_Issue__c = parentCase.Tracking_Root_Issue__c;
        childcs.Actual_Restore_Time__c = parentCase.Actual_Restore_Time__c;
        childcs.Impact_Level__c = parentCase.Impact_Level__c;
        childcs.Urgency_Level__c = parentCase.Urgency_Level__c;
    }
    
    
    /* replaces trigger AutoUpdateChildforNOCcases */
    private void parentNOCCases() {
        Set<Id> parentCaseIds = new Set<Id>();
        List<Case> childCases = new List<Case>();
        
        for(Case cs : (List<Case>)Trigger.new){
            
            if(isChanged('Status', cs) && cs.Status == 'Closed' && caseRtMap.get(cs.recordTypeID).getName() == 'PGi-Parent Ticket (NOC)'){
                parentCaseIds.add(cs.id);
            }
        }
        if(!parentCaseIds.isEmpty()){
            childCases = [SELECT Id, ParentId, Tracking_Root_Category__c, Tracking_Root_Cause__c, Tracking_Root_Issue__c, Actual_Restore_Time__c, Impact_Level__c, Urgency_Level__c 
                          FROM Case 
                          WHERE ParentId IN: parentCaseIds
                          AND RecordType.DeveloperName = 'PGi_Client_External_Support'];
            
            if(!childCases.isEmpty()){    
                for(Case child : childCases) {
                    Case parentCase = (Case)Trigger.newMap.get(child.ParentId);
                    updateFieldsFromParentNoc(child, parentCase);                    
                }
                update childCases;
            }
        }
    }
    
    private void addToPausedTimeToScheduledFields() {
        for(Case cs : (List<Case>)Trigger.new) {
            String caseRTName = caseRtMap.get(cs.recordTypeID).getName();
            if(cs.Total_Paused_Time__c != null && isChanged('Total_Paused_Time__c', cs) 
               && (caseRTName == 'PGi-Parent Ticket (NOC)' 
                   || caseRTName == 'PGi-Client External Support' 
                   | caseRTName == 'PGi-Non PGi Product Support')) {
                       Case oldCase = (Case)Trigger.oldMap.get(cs.Id);
                       Decimal oldPausedTime = oldCase.Total_Paused_Time__c;
                       Decimal newPausedTime = oldPausedTime == null ? (cs.Total_Paused_Time__c) : (cs.Total_Paused_Time__c - oldPausedTime);
                           cs.Scheduled_Resolve_Time__c = cs.Scheduled_Resolve_Time__c.addSeconds((Integer)newPausedTime);
                       cs.Scheduled_Restore_Time__c = cs.Scheduled_Restore_Time__c.addSeconds((Integer)newPausedTime);
                   }
        }
    }
    
    private static List<Email_SLA_Management__c> caseSLA {get{
        if(caseSLA == null) {
            caseSLA = [SELECT Id, Origin__c, SLA_In_Hours__c, SLA_In_Minutes__c FROM Email_SLA_Management__c];
        }
        System.debug('caseEDmailSlasLIST>>'+caseSLA);
        return caseSLA;
    } set;}
    private void stampCaseCountdownFields() {
        List<Case> caseToCheckMatched = new List<Case>();
        Set<Id> caseIdSet = new Set<Id>();
        for(Case cs : (List<Case>)Trigger.new) {
            String caseRTName = caseRtMap.get(cs.recordTypeID).getName();
            if(caseRTName == 'PGi-Parent Ticket (NOC)' || caseRTName == 'PGi-Client External Support' || caseRTName == 'PGi-Non PGi Product Support') {
                // Hours to Resolve / Hours to Restore
                // Restore + 
                // 2, 4, 24, 48, 60
                // Resolve + 
                // 24, 36, 48, 72, 96
                //
                // Scheduled Resolve Time / Scheduled Restore Time
                DateTime caseCreatedDate = Trigger.isInsert ? System.now() : cs.CreatedDate;
                
                
                if(cs.Priority == '1 - Critical') {
                    cs.Hours_to_Restore_SLA__c = 2;
                    cs.Hours_to_Resolve_SLA__c = 24;
                }
                else if(cs.Priority == '2 - High') {
                    cs.Hours_to_Restore_SLA__c = 4;
                    cs.Hours_to_Resolve_SLA__c = 36;
                }
                else if(cs.Priority == '3 - Moderate') {
                    cs.Hours_to_Restore_SLA__c = 24;
                    cs.Hours_to_Resolve_SLA__c = 48;
                }
                else if(cs.Priority == '4 - Low') {
                    cs.Hours_to_Restore_SLA__c = 48;
                    cs.Hours_to_Resolve_SLA__c = 72;
                }
                else if(cs.Priority == '5 - No Impact/Info') {
                    cs.Hours_to_Restore_SLA__c = 60;
                    cs.Hours_to_Resolve_SLA__c = 96;
                }
                else {
                    cs.Hours_to_Restore_SLA__c = 60;
                    cs.Hours_to_Resolve_SLA__c = 96;
                }
                cs.Scheduled_Restore_Time__c = caseCreatedDate.addHours((Integer)cs.Hours_to_Restore_SLA__c);
                cs.Scheduled_Resolve_Time__c = caseCreatedDate.addHours((Integer)cs.Hours_to_Resolve_SLA__c);
            } else if(caseRTName == 'Inbound Email Support' || caseRTName == 'Outbound Email Support') {
                Id i =cs.Id;
                
                Integer slaInMinutes = 0;
                if(Trigger.isInsert ||  (cs.SLA_In_Minutes__c == null)) {
                    System.debug('IsNew');
                    for(Email_SLA_Management__c sla: caseSLA) {
                        System.debug('Entry');
                        if(cs.Origin == sla.Origin__c) {
                            if(sla.SLA_In_Hours__c == null && sla.SLA_In_Minutes__c == null) {
                                continue;
                            }
                            if(sla.SLA_In_Hours__c != null) {
                                slaInMinutes += (Integer)(sla.SLA_In_Hours__c * 60);
                            }
                            if(sla.SLA_In_Minutes__c != null) {
                                slaInMinutes += (Integer)(sla.SLA_In_Minutes__c);
                            }
                            cs.SLA_In_Minutes__c = slaInMinutes;
                            break;
                        }
                    }
                }
                if(cs.SLA_In_Minutes__c != null) {
                    if(Trigger.isInsert) {
                        caseToCheckMatched.add(cs);
                        /*cs.SLA_Time_to_Complete__c = System.now().addMinutes((Integer)cs.SLA_In_Minutes__c);*/
                        cs.Most_Recent_SLA_Start__c = System.now();
                    } else if(Trigger.oldMap != null && Trigger.oldMap.get(cs.Id) != null) {
                        
                        Case oldCase = (Case)Trigger.oldMap.get(cs.Id);
                        // RT-496 Case / Email - remove 48 hour time limit on SLA restarts
                        // if((oldCase.ClosedDate == null || oldCase.ClosedDate >= System.now().addHours(-48)) && (isChanged('Status', cs) && cs.Status == 'Customer Replied')) {
                        if((isChanged('Status', cs) && cs.Status == 'Customer Replied')) {
                            caseToCheckMatched.add(cs);                     
                            cs.Most_Recent_SLA_Start__c = System.now();
                        }
                    }
                }
            }
        }
        //RT-532  Need rules engine to omit certain criteria from applying SLAs
        if(!caseToCheckMatched.isEmpty()){
            checkCaseWithMatchedTeamEngineRules(caseToCheckMatched);
            if(!unMatchedCases.isEmpty()){
            for(case cs : unMatchedCases){
                cs.SLA_Time_to_Complete__c = System.now().addMinutes((Integer)cs.SLA_In_Minutes__c);
            }
            }
        }
        
    }
    
    private void populateClientAndConference() {
        for(Case c: (List<Case>)Trigger.new) {
            if(String.isNotBlank(c.PGi_Client_via_external_form__c)) {
                if(relatedClients.get(c.PGi_Client_via_external_form__c) != null) {
                    c.PGi_Client__c = relatedClients.get(c.PGi_Client_via_external_form__c).Id;
                }
            }
            if(String.isNotBlank(c.PGi_Conference_via_external_form__c)) {
                if(relatedConferences.get(c.PGi_Conference_via_external_form__c) != null) {
                    c.PGi_Conference__c = relatedConferences.get(c.PGi_Conference_via_external_form__c).Id;
                }
            }
        }
        
    }
    public Map<Id, Case> parentCases { get{
        if(parentCases == null) {
            parentCases = new Map<Id, Case>();
            if(Trigger.new != null) {
                for(Case c: (List<Case>)Trigger.new) {
                    if(c.ParentId != null) {
                        parentCases.put(c.ParentId, null);
                    }
                    if(c.External_Support_Case_Number__c != null) {
                        parentCases.put(c.External_Support_Case_Number__c, null);
                    }
                    parentCases.put(c.Id, null);
                }
            }
            if(Trigger.old != null) {
                for(Case oldCase: (List<Case>)Trigger.old) {
                    if(oldCase.ParentId != null) {
                        parentCases.put(oldCase.ParentId, null);
                    }
                    if(oldCase.External_Support_Case_Number__c != null) {
                        parentCases.put(oldCase.External_Support_Case_Number__c, null);
                    }
                }
            }
            parentCases = new Map<Id, Case>([SELECT Id, Child_Cases__c, (SELECT Id FROM Cases), (SELECT Id FROM Cases__r) FROM Case WHERE Id IN: parentCases.keySet()]);
        }
        return parentCases;
    } set; }
    public static Map<String, PGI_Conference__c> relatedConferences { get{
        if(relatedConferences == null) {
            relatedConferences = new Map<String, PGI_Conference__c>();
            Set<String> queryStrings = new Set<String>();
            for(Case c: (List<Case>)Trigger.new) {
                if(String.isNotBlank(c.PGi_Conference_via_external_form__c)) {
                    queryStrings.add(c.PGi_Conference_via_external_form__c);
                }
            }
            for(PGI_Conference__c sObj: [SELECT Id, Name FROM PGI_Conference__c WHERE Name IN: queryStrings LIMIT 5000]){
                if(String.isNotBlank(sObj.Name)) {
                    relatedConferences.put(sObj.Name, sObj);
                }
            }
        }
        return relatedConferences;
    } set; }
    public static Map<String, PGI_Client__c> relatedClients { get{
        if(relatedClients == null) {
            relatedClients = new Map<String, PGI_Client__c>();
            Set<String> queryStrings = new Set<String>();
            for(Case c: (List<Case>)Trigger.new) {
                if(String.isNotBlank(c.PGi_Client_via_external_form__c)) {
                    queryStrings.add(c.PGi_Client_via_external_form__c);
                }
            }
            for(PGI_Client__c sObj: [SELECT Id, Name FROM PGI_Client__c WHERE Name IN: queryStrings LIMIT 5000]){
                if(String.isNotBlank(sObj.Name)) {
                    relatedClients.put(sObj.Name, sObj);
                }
            }
        }
        return relatedClients;
    } set; }
    private void descriptionPreview() {
        for(Case c: (List<Case>)Trigger.new) {
            c.Description_Preview__c = c.Description != null && c.Description.length() > 255 ? c.Description.left(255) : c.Description;
        }
    }
    private void reassignToQueue() {
        /* COD-1235 When I save a Case with the fieled the Confirmed Production Defect as true
Then the Case will be reassigned to the queue which matches the name value in "Return for Client Follow-up" field */
        
        /* COD-1254 When I save a Case with the Status as RESOLVED 
Then the Case will be reassigned to the queue which matches the name value in "Return for Client Follow-up" field if the current ownership does not match the value */
        for(Case c: (List<Case>)Trigger.new) {
            if((isChanged(CONFIRMED_DEFECT, c) && c.Confirmed_Production_Defect__c 
                || isChanged(STATUS, c) && c.Status == 'Resolved' && caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == PGI_EXTERNAL_SUPPORT)
               && String.isNotBlank(c.Return_for_Client_Follow_Up__c)) {
                   if(queueNameToQueue.get(c.Return_for_Client_Follow_Up__c) != null) {
                       c.OwnerId = queueNameToQueue.get(c.Return_for_Client_Follow_Up__c).QueueId;
                   }
               }
        }
    }
    
    
    /* helper method to provide queue name to queue map */
    public Static Map<String, QueueSobject> queueNameToQueue {get {
        if(queueNameToQueue == null) {
            queueNameToQueue = new Map<String, QueueSobject>();
            for(QueueSobject q: [SELECT Id, QueueId, Queue.Name FROM QueueSobject WHERE SobjectType = 'Case']) {
                queueNameToQueue.put(q.Queue.Name, q);
            }
        }
        return queueNameToQueue;
    }set;}
    
    private void forceAutoGeneratedForSaveFalse() {
        for(Case updatedCase : (List<Case>)Trigger.new) {
            if(updatedCase.LastModifiedDate > updatedCase.CreatedDate.addSeconds(20)) {
                updatedCase.Auto_Generated_For_Case__c = false;    
            }
        }
    }
    
    private static Set<Id> caseCommentIds = new Set<Id>();
    
    //RT-122---------/
    private void populatePGiforInboundEmailServiceCaseRT() {
        
        // RT-122 :
        // Developer: Anup
        Map<String, List<PGi_Client__c>> pgiClientsListByEmail = new Map<String, List<PGI_Client__c>>();
        List<Case> casesWithInbondEmailRT =  new List<Case>();
        Id RecordTypeIdCase = Schema.SObjectType.Case.getRecordTypeInfosByName().get('Inbound Email Support').getRecordTypeId();
        for(Case objCase : (List<Case>)Trigger.new){
            if(objCase.RecordTypeId == RecordTypeIdCase && String.isNotBlank(objCase.SuppliedEmail)){
                casesWithInbondEmailRT.add(objCase);
                pgiClientsListByEmail.put(objCase.SuppliedEmail, new List<PGi_Client__c>());
            }
        }
        pgiClientsListByEmail.remove(null);
        
        for(PGI_Client__c pgiClient : [SELECT id, Client_Email__c 
                                       FROM PGI_Client__c 
                                       WHERE Client_Email__c =: pgiClientsListByEmail.keySet() LIMIT 5000])
        {
            if(pgiClientsListByEmail.containsKey(pgiClient.Client_Email__c)){
                pgiClientsListByEmail.get(pgiClient.Client_Email__c).add(pgiClient);
            }
        }
        // update the Case with pgi client field 
        for(Case objCase : casesWithInbondEmailRT){
            //if multiple match is found do nothing. If no match is found do nothing.
            if(String.isNotBlank(objCase.SuppliedEmail) && pgiClientsListByEmail.containsKey(objCase.SuppliedEmail) && pgiClientsListByEmail.get(objCase.SuppliedEmail).size() == 1){
                objCase.PGi_Client__c = pgiClientsListByEmail.get(objCase.SuppliedEmail)[0].Id;
            }
        }
    }
    
    /**
When new duplicate Case is created with EmailtoCase then will use this Method to find the parent case and update it as customer replied. 
*/
    private void emailToCaseFindParentCase(){
        Set<Id> recordTypeIdsToExclude = new Set<Id>{Schema.SObjectType.Case.getRecordTypeInfosByName().get('Inbound Email Support').getRecordTypeId(), 
            Schema.SObjectType.Case.getRecordTypeInfosByName().get('Outbound Email Support').getRecordTypeId()};
                List<Case> caseToCheckMatched = new List<Case>();
        List<Case> newCase = new List<Case>();
        Set<ID> caseIdSet = new Set<Id>();
        Map<Id,Case> caseUpdateById  = new Map<Id,Case>();
        Map<String, Case> caseBySubjectStrig = new Map<String, Case>();
        for(Case objCase : (List<Case>) trigger.new){
            if(objCase.SuppliedEmail != null && objCase.Subject != null && !recordTypeIdsToExclude.contains(objCase.RecordTypeId) ){
                caseBySubjectStrig.put(extractMainSubject(objCase.Subject), objCase);
                caseBySubjectStrig.put(objCase.Subject, objCase);
            }
        }
        
        Map<Id, Case> caseById;
        System.debug('caseBySubjectStrig>>>>>>>>>> '+caseBySubjectStrig.Values());
        System.debug('caseBySubjectStrig>>>>keySet>>>>>> '+caseBySubjectStrig.keySet());
        if(caseBySubjectStrig != null && !caseBySubjectStrig.isEmpty()){
            caseById = new Map<Id, Case>([SELECT ID,SLA_In_Minutes__c, Subject, RequestorsEmail__c, Status, LastModifiedDate, CreatedDate, IsClosed, parentId, ClosedDate
                                          FROM Case 
                                          WHERE Id IN (SELECT ParentId 
                                                       FROM EmailMessage 
                                                       WHERE Subject_Indexed__c =: caseBySubjectStrig.keySet()) 
                                          AND RecordTypeId NOT IN: recordTypeIdsToExclude 
                                          LIMIT 500]);
        }
        
        //emailONError('enter casesize'+caseById.size());
        //Map<Id, EmailMessage> emailMessageByCaseID = new Map<Id, EmailMessage>();
        if(caseBySubjectStrig != null){
            for(EmailMessage objEmail : [SELECT Id, ParentId, HtmlBody, Headers,Subject_Indexed__c,Subject, FromName, FromAddress, ToAddress, CcAddress, BccAddress 
                                         FROM EmailMessage 
                                         WHERE Subject_Indexed__c =: caseBySubjectStrig.keySet() 
                                         AND Parent.RecordTypeId NOT IN: recordTypeIdsToExclude
                                         ORDER BY CreatedDate DESC LIMIT 500])
            {
                
                
                List<String> EmailsList = new List<String>(); //  if we got replay mail from cc.
                if(String.isNotBlank(objEmail.CcAddress)){
                    EmailsList.addALL(objEmail.CcAddress.toLowerCase().split(';'));
                }
                if(String.isNotBlank(objEmail.BccAddress)){
                    EmailsList.addALL(objEmail.BccAddress.toLowerCase().split(';'));
                }
                if(String.isNotBlank(objEmail.FromAddress)){
                    EmailsList.add(objEmail.FromAddress.toLowerCase());
                }
                for(Integer i = 0; i < emailsList.size(); i++) {
                    emailsList[i] = emailsList[i].trim();
                }
                Case objParentCase = caseById.get(objEmail.ParentId);
                //RT-462
                Case newEmailCase = caseBySubjectStrig.get(objEmail.Subject_Indexed__c);
                if(String.isNotBlank(newEmailCase.SuppliedEmail) && EmailsList.contains(newEmailCase.SuppliedEmail.toLowerCase()) ){
                    
                    //RT-496 Case / Email - remove 48 hour time limit on SLA restarts
                    // DateTime twoDaysAgo = System.now().addHours(-48);
                    // if(objParentCase.ClosedDate != null && objParentCase.ClosedDate >= twoDaysAgo){  // checking case has been closed in less then 48 hrs
                    if(objParentCase.ClosedDate != null){
                        caseToCheckMatched.add(objParentCase);
                        newCase.add(newEmailCase);
                        /*objParentCase.SLA_Time_to_Complete__c=System.now();
						updateCaseFields(caseUpdateById, objParentCase, newEmailCase);*/
                        
                    }else if(!objParentCase.IsClosed ){ 
                        // if(!objParentCase.IsClosed ){ 
                        // Checking case is not closed.
                        updateCaseFields(caseUpdateById, objParentCase, newEmailCase);
                        
                    }
                }
                
            }
        }
        //RT-532  Need rules engine to omit certain criteria from applying SLAs
        if(!caseToCheckMatched.isEmpty()){
            checkCaseWithMatchedTeamEngineRules(caseToCheckMatched);
            if(!unMatchedCases.isEmpty()){
            for(case cs : unMatchedCases){
                //Chenged Because Tim Told to update Minutes.
                cs.SLA_Time_to_Complete__c =System.now().addMinutes((Integer)cs.SLA_In_Minutes__c);
            }
            }
            for(Integer i=0;i<caseToCheckMatched.size();i++){
                updateCaseFields(caseUpdateById, caseToCheckMatched[i], newCase[i]);
            } 
        }
        
        TriggerHandler.bypass('CaseTriggerHandler');
        if(!caseUpdateById.isEmpty()){
            Database.update(caseUpdateById.values(), false);
        }
        TriggerHandler.clearBypass('CaseTriggerHandler'); 
    }
    private void updateCaseFields(Map<Id,Case> caseUpdateById, Case objParentCase, Case newEmailCase){
        // check parentCase has a parent Case
        if(objParentCase.parentId != null){
            if(objParentCase.Status != 'New'){
                if(!caseUpdateById.containsKey(objParentCase.parentId)){
                    caseUpdateById.put(objParentCase.parentId, new Case(Id =objParentCase.parentId));
                }
                caseUpdateById.get(objParentCase.parentId).Status = 'Customer Replied';
            }
            newEmailCase.parentId = objParentCase.parentId;
        }else{
            if(objParentCase.Status != 'New'){
                if(!caseUpdateById.containsKey(objParentCase.Id)){
                    caseUpdateById.put(objParentCase.Id, new Case(Id = objParentCase.Id));
                }
                case obj = caseUpdateById.get(objParentCase.Id);
                obj.Status = 'Customer Replied';
                caseUpdateById.put(objParentCase.Id, obj);
            }
            newEmailCase.parentId = objParentCase.Id;
        }
        //return caseUpdateById;
    }
    /**
get the supject from email.
*/
    private String extractMainSubject(String emailSubject)
    {
        if(emailSubject == null || emailSubject.length() < 3)
            return emailSubject;
        String[] prefixes = new String[] {'re: sandbox: re:','fw:','re:', 'automatic reply:', 'out of office autoreply:', 'out of office', 'fwd:', '[external]', 're: [external]', 're: [external] re:'};  
            String target = emailSubject.toLowerCase();
        for(String prefix: prefixes) {
            Integer index = target.indexOf(prefix); 
            if(index == 0 ){
                String mainSubject = emailSubject.substring(prefix.length(),emailSubject.length());
                return mainSubject.trim();
            }  
        }
        return emailSubject;     
    }
    
    //RT-308//
    
    private static Profile profile {get {
        return PGI_Utility.profile;
    } set; }
    
    // PB: PGi-Incident Review Updates
    private void pgiIncidentReviewUpdates(){
        
        Set<Id> custCaseIdSet = new Set<Id>();
        Map<Id, Case> caseById;
        
        for(Case objCase : (List<Case>) trigger.new){
            if(objCase.Customer_s_Case_Number_for_Review__c != null){
                custCaseIdSet.add(objCase.Customer_s_Case_Number_for_Review__c);
            }
        }
        
        // System.debug('custCaseIdSet>>>>>>>>>> '+custCaseIdSet);
        if(!custCaseIdSet.isEmpty()){
            caseById = new Map<Id, Case>([SELECT ID, PGi_Company__c, ParentId
                                          FROM Case 
                                          WHERE Id IN : custCaseIdSet]);
        }
        // System.debug('caseById>>>>>>>>>> '+caseById);
        
        for(Case c: (List<Case>)Trigger.new) {
            // Populate PGi Company
            if(caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == PGi_Incident_Case_Review && caseById != null && caseById.containsKey(c.Customer_s_Case_Number_for_Review__c)){
                c.PGi_Company__c = caseById.get(c.Customer_s_Case_Number_for_Review__c).PGi_Company__c;
            } 
            // Populate NOC
            if(caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == PGi_Incident_Case_Review && caseById != null && caseById.containsKey(c.Customer_s_Case_Number_for_Review__c) && c.Parent_Ticket_NOC__c == null && caseById.get(c.Customer_s_Case_Number_for_Review__c).ParentId != null){
                c.Parent_Ticket_NOC__c = caseById.get(c.Customer_s_Case_Number_for_Review__c).ParentId;
            }
        }
        
    }
    
    // PB: set priority level
    private void setPriorityLevel(){
        
        for(Case objCase : (List<Case>) Trigger.new)
        {
            // 1 - Critical
            if(objCase.Urgency_Level__c == 'High' && objCase.Impact_Level__c == 'High') 
            {
                objCase.Priority = '1 - Critical'; 
            }  
            // 2 - High
            else if((objCase.Urgency_Level__c == 'High' && objCase.Impact_Level__c == 'Medium') || (objCase.Urgency_Level__c == 'Medium' && objCase.Impact_Level__c == 'High'))
            {
                objCase.Priority = '2 - High';
            }
            // 3 - Moderate
            else if((objCase.Urgency_Level__c == 'High' && objCase.Impact_Level__c == 'Low') || (objCase.Urgency_Level__c == 'Low' && objCase.Impact_Level__c == 'High') || (objCase.Urgency_Level__c == 'Medium' && objCase.Impact_Level__c == 'Medium'))
            {
                objCase.Priority = '3 - Moderate';
            }
            // 4 - Low
            else if((objCase.Urgency_Level__c == 'Low' && objCase.Impact_Level__c == 'Medium') || (objCase.Urgency_Level__c == 'Low' && objCase.Impact_Level__c == 'Low') || (objCase.Urgency_Level__c == 'Medium' && objCase.Impact_Level__c == 'Low'))
            {
                objCase.Priority = '4 - Low';
            }
            // 5 - No Impact/Info
            else if(objCase.Impact_Level__c == 'No Impact')
            {
                objCase.Priority = '5 - No Impact/Info';
            }
        }
    }
    
    // //PB: Urgency level
    private void setUrgencyLevel(){
        
        for(Case objCase : (List<Case>) Trigger.new)
        {
            String caseRTDevpname = caseRecordTypeMap.get(objCase.RecordTypeId).DeveloperName;
            // High Red Flagged
            if(caseRTDevpname == 'PGi_Client_External_Support' && objCase.PGi_Client_Red_Flag__c != null && objCase.ParentId == null)
            {
                objCase.Urgency_Level__c = 'High';
            }
            // Medium
            else if(caseRTDevpname == 'PGi_Client_External_Support' && objCase.PGi_Company_Red_Flag__c == null && objCase.PGi_Client_Red_Flag__c == null && objCase.ParentId == null && (objCase.PGi_Company_Status_Level__c == 'D' || objCase.PGi_Company_Status_Level__c == 'P'))
            {
                objCase.Urgency_Level__c = 'Medium';
            }
            // Medium Red Flagged
            else if(caseRTDevpname == 'PGi_Client_External_Support' && objCase.PGi_Company_Red_Flag__c != null && objCase.PGi_Client_Red_Flag__c == null && objCase.ParentId == null && (objCase.PGi_Company_Status_Level__c == 'B' || objCase.PGi_Company_Status_Level__c == 'S' || objCase.PGi_Company_Status_Level__c == 'G'))
            {
                objCase.Urgency_Level__c = 'Medium';
            }
            else if(caseRTDevpname == 'PGi_Client_External_Support' && objCase.PGi_Company_Red_Flag__c == null && objCase.PGi_Client_Red_Flag__c == null && objCase.ParentId == null && (objCase.PGi_Company_Status_Level__c != 'D' || objCase.PGi_Company_Status_Level__c != 'P' || objCase.PGi_Company_Status_Level__c == null))
            {
                objCase.Urgency_Level__c = 'Low';
            }
        }       
    }
    
    // helper method to RecordTypes for SetCompanyandConfDetails
    public static Map<Id,RecordType> compnyandConfrecordTypeMap { get{
        
        List<String> recordTypeList = new List<String>{'PGi-Payment Research Request','PGi-Billing Support','PGi-Credit Request','PGi-Profile Request','PGi-Rate Entry Request','PGi-Revenue Assurance Audit Request','PGi-Request for Adjustment'};
            
            if(compnyandConfrecordTypeMap == null) {
                compnyandConfrecordTypeMap = new Map<Id,RecordType>([SELECT Id,Name FROM RecordType WHERE Name IN :recordTypeList]);
            }
        return compnyandConfrecordTypeMap;
    } set; }
    
    // PB: PGi - Case - Set Company & Conf Details
    private void pgiSetCompanyandConfDetails(){
        
        Map<Id, PGi_Client__c> pgiClientMap;
        Map<Id, PGi_Client__c> billToClientMap;
        Map<Id, PGi_Conference__c> pgiConfMap;
        
        Set<Id> pgiClientId = new Set<Id>();
        Set<Id> billtoClientId = new Set<Id>();
        Set<Id> pgiConfrenceId = new Set<Id>();
        
        for(Case objCase : (List<Case>) trigger.new){
            if(objCase.PGI_Client__c != null){
                pgiClientId.add(objCase.PGI_Client__c);
            }
            if(objCase.Bill_To_Client__c != null){
                billtoClientId.add(objCase.Bill_To_Client__c);
            }
            if(objCase.PGi_Conference__c != null){
                pgiConfrenceId.add(objCase.PGi_Conference__c);
            }
        }
        
        if(!pgiClientId.isEmpty()){
            pgiClientMap = new Map<Id, PGi_Client__c>([SELECT ID, PGi_Company__c
                                                       FROM PGi_Client__c 
                                                       WHERE Id IN : pgiClientId]);
        }
        
        if(!billtoClientId.isEmpty()){
            billToClientMap = new Map<Id, PGi_Client__c>([SELECT ID, PGi_Company__c
                                                          FROM PGi_Client__c 
                                                          WHERE Id IN : billtoClientId]);
        }
        
        if(!pgiConfrenceId.isEmpty()){
            pgiConfMap = new Map<Id, PGi_Conference__c>([SELECT ID, Bridge_Name__c, Listen_Only_Passcode__c, Moderator_Passcode__c, Participant_Passcode__c
                                                         FROM PGi_Conference__c 
                                                         WHERE Id IN : pgiConfrenceId]);
        }
        
        for(Case c: (List<Case>)Trigger.new) {
            
            String caseRTDevpname = caseRecordTypeMap.get(c.RecordTypeId).DeveloperName;
            
            // PGi Client is Populated (Non-Payment)
            if(pgiClientMap != null && String.isNotBlank(c.PGI_Client__c) && pgiClientMap.containsKey(c.PGI_Client__c) 
               && String.isNotBlank(pgiClientMap.get(c.PGI_Client__c).PGi_Company__c) && c.PGi_Client__c != 'a5G1B000001VPkRUAW'
              ){
                  c.PGi_Company__c = pgiClientMap.get(c.PGI_Client__c).PGi_Company__c;
              }
            // PGi Client is Populated (Payment)
            if(billToClientMap != null && String.isNotBlank(c.Bill_To_Client__c) && billToClientMap.containsKey(c.Bill_To_Client__c) && String.isNotBlank(billToClientMap.get(c.Bill_To_Client__c).PGi_Company__c) && compnyandConfrecordTypeMap.containsKey(c.Id) ){
                c.PGi_Company__c = billToClientMap.get(c.Bill_To_Client__c).PGi_Company__c;
            }
            // PGi Conference is Populated
            if(pgiConfMap != null && String.isNotBlank(c.PGi_Conference__c) && pgiConfMap.containsKey(c.PGi_Conference__c) && caseRTDevpname == 'PGi_Client_External_Support'){
                c.Bridge_Name__c = pgiConfMap.get(c.PGi_Conference__c).Bridge_Name__c;
                c.Listen_Only_Passcode__c = pgiConfMap.get(c.PGi_Conference__c).Listen_Only_Passcode__c;
                c.Moderator_Passcode__c = pgiConfMap.get(c.PGi_Conference__c).Moderator_Passcode__c;
                c.Participant_Passcode__c = pgiConfMap.get(c.PGi_Conference__c).Participant_Passcode__c;
            }
        }
        
    }
    
    
    // helper method to RecordTypes for OLA details
    public static Map<Id,RecordType> olaRecordTypeMap { get{
        
        List<String> StrRecordType = new List<String>{'PGi-Client External Support','PGi-Parent Ticket (NOC)','PGi-Non PGi Product Support'};
            
            if(olaRecordTypeMap == null) {
                olaRecordTypeMap = new Map<Id,RecordType>([SELECT Id,Name FROM RecordType WHERE Name IN :StrRecordType]);
            }
        return olaRecordTypeMap;
    } set; }
    
    // helper method to Profile for SetCaseFieldsfromZendeskFields
    public static Map<Id,Profile> zendeskProfileMap { get{
        
        List<String> profileNamelist = new List<String>{'PGi Service and Care Support','PGi Finance Support','PGi Technical Support','System Administrator','System Admin API Only','PGi Service Experience Managers','PGi Global Service Desk'};
            
            if(zendeskProfileMap == null) {
                zendeskProfileMap = new Map<Id,Profile>([SELECT Id,Name FROM Profile WHERE Name IN :profileNamelist]);
            }
        return zendeskProfileMap;
    } set; }
    
    // // PB: PGi - Case - Set Case Fields from Zendesk Fields
    private void pgiSetCaseFieldsfromZendeskFields(){
        
        String ZDSourceVal;
        
        for(Case objCase : (List<Case>) Trigger.new)
        {
            String caseRTDevpname = caseRecordTypeMap.get(objCase.RecordTypeId).DeveloperName;
            ZDSourceVal = objCase.ZD_Source__c;    
            
            // Set SF Case Origin_New
            if(profile != null && profile.Name != null && profile.Name.equals('System Admin API Only') && objCase.Status == 'New' && caseRTDevpname == 'PGi_Client_External_Support' && String.isNotBlank(objCase.ZD_Source__c) && objCase.ZD_Source__c != null)
            {
                if(	ZDSourceVal.containsIgnoreCase('Mail') || ZDSourceVal.containsIgnoreCase('Closed Ticket') || ZDSourceVal.containsIgnoreCase('Web Service'))
                {
                    objCase.Origin = 'Email';
                }
                else if(ZDSourceVal.containsIgnoreCase('Web Form'))
                {
                    objCase.Origin ='Web Ticket';
                }
                else if(ZDSourceVal.containsIgnoreCase('Chat'))
                {
                    objCase.Origin ='Chat';
                }
            }
            // Set SF Case Origin
            if(profile != null && profile.Name != null && zendeskProfileMap != null && !zendeskProfileMap.containsKey(profile.Id) && caseRTDevpname == 'PGi_Client_External_Support' && objCase.Status != 'New' && String.isNotBlank(objCase.ZD_Source__c) && objCase.ZD_Source__c != null)
            {
                // Set Email Origin (from Email)
                if(ZDSourceVal.containsIgnoreCase('Mail') || ZDSourceVal.containsIgnoreCase('Closed Ticket') || ZDSourceVal.containsIgnoreCase('Web Service'))
                {
                    objCase.Origin ='Email';
                }
                else if(ZDSourceVal.containsIgnoreCase('Web Form'))
                {
                    objCase.Origin ='Web Ticket';
                }
                else if(ZDSourceVal.containsIgnoreCase('Chat'))
                {
                    objCase.Origin ='Chat';
                }
            }
            // Status - In Progress
            if(caseRTDevpname == 'PGi_Client_External_Support' && objCase.ZD_Source__c != null  && String.isNotBlank(objCase.ZD_Source__c) && ZDSourceVal.containsIgnoreCase('Open'))
            {
                objCase.Status = 'In Progress';
            }
            // Status - Pending Client Info/Action
            else if(caseRTDevpname == 'PGi_Client_External_Support' && String.isNotBlank(objCase.ZD_Source__c) && objCase.ZD_Source__c != null && ZDSourceVal.containsIgnoreCase('Pending'))
            {
                objCase.Status = 'Pending Client Info/Action';
            }
            else if(caseRTDevpname == 'PGi_Client_External_Support' && String.isNotBlank(objCase.ZD_Source__c) && objCase.ZD_Source__c != null && ZDSourceVal.containsIgnoreCase('Solved'))
            {
                objCase.Status = 'Closed';
            }
        }
        
    }
    private static Set<Id> assignmentsProcessed = new Set<Id>();
    // // PB: PGi - Case Assignment Record
    private void pgiCaseAssignmentRecord(){        
        
        List<Case_Assignment__c> caseAssignmetList = new List<Case_Assignment__c>();
        
        for(Case objCase : (List<Case>) Trigger.new){
            if(ischanged('Assigned_To__c' ,objCase) && objCase.Assigned_To__c != null && !assignmentsProcessed.contains(objCase.Id)){
                assignmentsProcessed.add(objCase.Id);
                Case_Assignment__c caseAssignmet = new Case_Assignment__c();
                caseAssignmet.Related_Case__c = objCase.Id;
                caseAssignmet.Assigned_User__c = objCase.Assigned_To__c;
                caseAssignmetList.add(caseAssignmet);
            }
        }
        if(!caseAssignmetList.isEmpty()){
            INSERt caseAssignmetList;
        }
        
    }
    
    // // PB: PGi - Update Email Child Cases
    private void pgiUpdateEmailCase(){    
        
        for(Case c: (List<Case>)Trigger.new) {
            // Is an Email Child Case
            if(caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == Inbound_Email_Support && c.HasParentCase__c){
                c.Do_not_email_on_Case_Closed__c = true;
            }
        }
    }
    
    // // PB: PGi - Update Email Child Cases
    private void pgiUpdateEmailChildCases(){      
        
        Set<Id> assignedParentCaseIds = new Set<Id>();
        Set<Id> emailParentCaseIds = new Set<Id>();
        List<Case> assignedchildCasestoUpdate = new List<Case>();
        List<Case> emailchildCasestoUpdate = new List<Case>();
        
        Map<Id,Case> caseMap = new Map<Id,Case>();
        
        for(Case c: (List<Case>)Trigger.new) {
            if(!c.HasParentCase__c){
                // Assigned Parent Email Case
                if(c.Assigned_To__c  != null && caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == Inbound_Email_Support){
                    
                    assignedParentCaseIds.add(c.Id);
                }
                // Is an Email Parent Case
                if(caseRecordTypeMap.get(c.RecordTypeId).DeveloperName == Inbound_Email_Support && closedStatuses.contains(c.Status)){
                    emailParentCaseIds.add(c.Id);
                }
            }
        }
        
        if(!assignedParentCaseIds.isEmpty()){
            assignedchildCasestoUpdate = [SELECT Id, Assigned_To__c,ParentId
                                          FROM Case 
                                          WHERE ParentId IN: assignedParentCaseIds];
        }
        
        
        if(!emailParentCaseIds.isEmpty()){
            emailchildCasestoUpdate = [SELECT Id, Case_Resolution_Notes__c, Status
                                       FROM Case 
                                       WHERE ParentId IN: emailParentCaseIds];
        }
        
        if(!assignedParentCaseIds.isEmpty()){
            for(Case c: [SELECT Id,Assigned_To__c FROM Case WHERE Id IN: assignedParentCaseIds]) {
                caseMap.put(c.Id,c);
            }
        }
        
        if(!assignedchildCasestoUpdate.isEmpty()){    
            for(Case childCase : assignedchildCasestoUpdate) {
                childCase.Assigned_To__c =  caseMap.get(childCase.ParentId).Assigned_To__c;               
            }
            UPDATE assignedchildCasestoUpdate;
        }
        
        
        if(!emailchildCasestoUpdate.isEmpty()){    
            for(Case childCase : emailchildCasestoUpdate) {
                childCase.Case_Resolution_Notes__c = 'Refer to Parent Case';
                childCase.Status =  'Closed';               
            }
            UPDATE emailchildCasestoUpdate;
        }
        
    }
    
    public class teamEngine{
        List<Case_SLA_Exception_Rules__c> ruleEngineList;
        Set<String> caseFieldsSet;
        
        public teamEngine(List<Case_SLA_Exception_Rules__c> ruleEngineList, Set<String> caseFieldsSet){
            this.ruleEngineList = ruleEngineList;
            this.caseFieldsSet = caseFieldsSet;
        }
    }
    
    // To get Map of MemberId to Acc/Opp/Owner Fields and  MemberId to OpportunityLineItem Fields
    private static teamEngine teamEngineWrapper {get {
        if(teamEngineWrapper == null){
            Set<String> caseFieldsSet = new Set<String>{'Id'};
                
                List<Case_SLA_Exception_Rules__c> ruleEngineList =  [SELECT ID, Name, Evaluation_Order__c, Rule_Order__c,
                                                             (SELECT ID, Object_Name__c, Relationship_Name__c,Field_API_Name__c, Field_Name__c, Field_Type__c, Field_Value__c, Line_Number__c, Field_Operator__c
                                                              FROM Case_SLA_Exception_Rule_Conditions__r Order by Line_Number__c ASC )                                       
                                                             FROM Case_SLA_Exception_Rules__c Order by Rule_Order__c ASC];
            //    System.debug('ot member is'+ruleEngineList);
            for(Case_SLA_Exception_Rules__c caseMemberRules : ruleEngineList) {
                //TODO - comment this
                for(Case_SLA_Exception_Rule_Conditions__c objRule : caseMemberRules.Case_SLA_Exception_Rule_Conditions__r){
                    if(String.isBlank(objRule.Relationship_Name__c)){
                        caseFieldsSet.add(objRule.Field_API_Name__c);
                    }
                }     
            }
            teamEngineWrapper = new teamEngine(ruleEngineList, caseFieldsSet);
        }
        return teamEngineWrapper;
    } set;}
    
    Public static List<Case> matchedCases {get ;set;}
    Public static List<Case> unMatchedCases {get ;set;}
    //RT-532
    private static void checkCaseWithMatchedTeamEngineRules(List<Case> objCaseLst) {
        try {
            unMatchedCases = new List<Case>();
            matchedCases = new List<Case>();
            Integer count = 0;
            for(Case objCase : objCaseLst){
                count =count+1;
                Boolean b = false;
                try {
                    if(teamEngineWrapper != null && teamEngineWrapper.ruleEngineList != null){
                        for(Case_SLA_Exception_Rules__c otMemberRules : teamEngineWrapper.ruleEngineList){
                            String EvaluationOrder = otMemberRules.Evaluation_Order__c;
                            try {
                                if(otMemberRules.Case_SLA_Exception_Rule_Conditions__r != null) {
                                    for(Case_SLA_Exception_Rule_Conditions__c objRule : otMemberRules.Case_SLA_Exception_Rule_Conditions__r){
                                        try {
                                            if(String.isBlank(objRule.Relationship_Name__c)){
                                                EvaluationOrder = EvaluationOrder.replaceFirst(String.valueOf(objRule.Line_Number__c), String.valueOf(checkCaseMatch(objCase,objRule))).toUpperCase();
                                                System.debug('EvaluationOrder>>aaa>>>>> '+EvaluationOrder);
                                            }else{
                                                EvaluationOrder = EvaluationOrder.replaceFirst(String.valueOf(objRule.Line_Number__c), 'FALSE').toUpperCase();
                                            }
                                        } catch(Exception innerexception) {
                                            
                                        }
                                    }
                                }
                            } catch (exception e) {

                            }
                            if(BooleanExpression.eval(EvaluationOrder)){
                                b=true;
                                
                                matchedCases.add(objCaseLst[count -1]);
                                    break;
                            }  
                            if(!b){
                                unMatchedCases.add(objCaseLst[count -1]);
                            }
                        }
                    }
                } catch (Exception ex) {
                    if(!b){
                        unMatchedCases.add(objCaseLst[count -1]);
                    }
                }
            }
        } catch (exception ex1) {

        }
    }
    //  
    private static Boolean checkCaseMatch(sObject objRec ,Case_SLA_Exception_Rule_Conditions__c otRule){
        System.debug('isMatched>>>> '+Case_ConditionCheck.checkCondition(objRec, otRule));
        return Case_ConditionCheck.checkCondition(objRec, otRule);
    }
    
    public static Boolean isMatch {get;set;}
    //end
}